#!/bin/bash
# Initialize helper functions
. helper_functions

VENDOR=$ROOT/vendor/aokp

for i in $@; do :; done
DEVICE=$i
APK="${@:(-2):1}"

function sync {
    local threads=$1
    if [ -z "$threads" ]; then
        threads=4
    fi
    repo sync -j${threads}
}

function curl_local {
    curl -L -o .repo/local_manifests/local_manifest.xml -O -L https://raw.github.com/elelinux/local_manifest/master/default.xml
}

function apk {
    . build/envsetup.sh
    lunch aokp_${DEVICE}-userdebug
    mmm $APK
}

function build {
    remove
    time brunch $DEVICE
    if [ ! -d "../www/$DEVICE" ]; then
        mkdir -p ../www/$DEVICE
    fi
    find . -name aokp_${DEVICE}_\*.zip -exec cp {} ../www/$DEVICE/ \; -exec echo "Successfully copied to Androtransfer..." \;
}

function build-all {
    cat $VENDOR/vendorsetup.sh | cut -f2 -d ' ' > .build_list
    while read line ;do
        DEVNAME=$(echo $line | cut -f2 -d ' ' | cut -f2 -d '_' | cut -f1 -d '-')
        brunch $DEVNAME
        if [ ! -d "../www/$DEVICE" ]; then
            mkdir -p ../www/$DEVICE
        fi
        find . -name aokp_${DEVNAME}_\*.zip -exec cp {} ../www/$DEVNAME/ \; -exec echo "Successfully copied to Androtransfer..." \;
    done < .build_list
    rm .build_list
}

function pick {
    ./picks.sh
}

function help {
    echo -e "usage: $0 [OPTIONS] APK DEVICE \n"

    echo "Options:
  -h, --help          Show this help message and exit
  -l, --clean         Runs make clean based on the device
  -c, --clobber       Performs a make clobber on the source
  -i, --installclean  Runs a make installclean based on the device
  -s, --sync          Runs a repo sync
  -b, --build         Builds the current source. Requires DEVICE be provided
  -a, --all           Builds all devices listed in $VENDOR/vendorsetup.sh
  -m, --mmm           Compiles the specified apk individually. Requires APK be provided
  -p, --pick          Run picks script
  -u, --curl_local    Curl local manifest"
}

function clean {
    lunch aokp_$DEVICE-userdebug
    make clean
}

function clobber {
    rm -rf out
}

function installclean {
    lunch aokp_$DEVICE-userdebug
    make installclean
}

function remove {
    find . -name aokp_\*.zip -exec rm -rf {} \; -exec echo "Removing previous builds" \;
}

if [ "$1" == "" ]
then
    help
    exit
else
    . build/envsetup.sh
fi

for arg
do
    delim=""
    case "$arg" in
        --help) args="${args} -h ";;
        --clean) args="${args} -l ";;
        --clobber) args="${args} -c ";;
        --installclean) args="${args} -i";;
        --sync) args="${args} -s ";;
        --build) args="${args} -b ";;
        --all) args="${args} -a ";;
        --mmm) args="${args} -m ";;
        --pick) args="${args} -p ";;
        --curl_local) args="${args} -u ";;
        *) [[ "${arg:0:1}" == "-" ]] || delim="\""
        args="${args}${delim}${arg}${delim} ";;
    esac
done

eval set -- $args
    while getopts ":huspcliam:b:?" option 2>/dev/null
    do
        case $option in
            h) help
                exit
                ;;
            u) curl_local
                ;;
            s) sync $2
                ;;
            c) clobber
                ;;
            l) clean
                ;;
            i) installclean
                ;;
            b) build
                ;;
            a) time build-all
                ;;
            m) apk
                ;;
            p) pick
                ;;
            :) echo "Option -$OPTARG requires an argument."
                help
                exit
                ;;
            *) echo $OPTARG is an unrecognized option;
                help
                exit
                ;;
        esac
    done
